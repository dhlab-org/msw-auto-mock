import { TOptions } from './types';
import {
  OperationCollection,
  transformToHandlerCode,
  transformToGenerateResultFunctions,
  transformToControllersType,
  transformToDtoImportCode,
} from './transform';
import { pascalCase } from 'es-toolkit';

const getImportsCode = (options: TOptions) => {
  const imports = [
    `import { HttpResponse, http, type HttpResponseResolver  } from 'msw';`,
    `import { faker } from '@faker-js/faker';`,
    `import { controllers } from '${options?.controllerPath ?? '@/app/mocks/controllers'}';`,
  ];

  return imports.join('\n');
};

const withApiCounterCode = () => `
// Map to store counters for each API endpoint
const apiCounters = new Map<string, number>();

const next = (apiKey: string) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};
`;

export const mockTemplate = (
  operationCollection: OperationCollection,
  baseURL: string,
  options: TOptions,
  entity: string,
) => `/**
* This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
* Feel free to commit/edit it as you need.
*/
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
${getImportsCode(options)}

faker.seed(1);

const baseURL = '${baseURL}';
${options.static ? '' : `const MAX_ARRAY_LENGTH = ${options?.maxArrayLength ?? 20};`}

${withApiCounterCode()}

export const ${entity}Handlers = [
  ${transformToHandlerCode(operationCollection)}
];

${transformToGenerateResultFunctions(operationCollection, baseURL, options)}
`;

export const controllersTypeTemplate = (entity: string, operationCollectionList: OperationCollection) => {
  const template = `
  import type { HttpResponseResolver } from "msw";
  ${transformToDtoImportCode(operationCollectionList)}
  
  export type ${pascalCase(`T_${entity}_Controllers`)} = {
    ${transformToControllersType(operationCollectionList)}
  }
  `;

  return template;
};

export const combineControllersTypeTemplate = (entityList: string[]) => {
  const template = `
  ${entityList
    .map(entity => {
      return `import type { ${pascalCase(`T_${entity}_Controllers`)} } from './${entity}.type';`;
    })
    .join('\n')}

  export type TControllers = ${entityList
    .map(entity => {
      return `Partial<${pascalCase(`T_${entity}_Controllers`)}>`;
    })
    .join(' | ')}
  `;

  return template;
};
