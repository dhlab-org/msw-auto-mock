import { ProgrammaticOptions } from './types';
import { OperationCollection, transformToHandlerCode, transformToGenerateResultFunctions, transformToControllersType, transformToDtoImportCode } from './transform';

const getImportsCode = (options: ProgrammaticOptions) => {
  const imports = [
    `import { HttpResponse, http, type HttpResponseResolver  } from 'msw';`, 
    `import { faker } from '@faker-js/faker';`,
    `import { controllers } from '${options?.controllerPath ?? '@/app/mocks/controllers'}';`
  ];

  return imports.join('\n');
};

const withApiCounterCode = () => `
// Map to store counters for each API endpoint
const apiCounters = new Map<string, number>();

const next = (apiKey: string) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};
`;

export const mockTemplate = (
  operationCollection: OperationCollection,
  baseURL: string,
  options: ProgrammaticOptions,
  entity: string,
) => `/**
* This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
* Feel free to commit/edit it as you need.
*/
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
${getImportsCode(options)}

faker.seed(1);

const baseURL = '${baseURL}';
${options.static ? '' : `const MAX_ARRAY_LENGTH = ${options?.maxArrayLength ?? 20};`}

${withApiCounterCode()}

export const ${entity}Handlers = [
  ${transformToHandlerCode(operationCollection)}
];

${transformToGenerateResultFunctions(operationCollection, baseURL, options)}
`;

export const browserIntegration = [
  `import { setupWorker } from 'msw/browser'`,
  `import { handlers } from './handlers'`,
  `export const worker = setupWorker(...handlers)`,
].join('\n');

export const nodeIntegration = [
  `import { setupServer } from 'msw/node'`,
  `import { handlers } from './handlers'`,
  `export const server = setupServer(...handlers)`,
].join(`\n`);

export const reactNativeIntegration = [
  `import { setupServer } from 'msw/native'`,
  `import { handlers } from './handlers'`,
  `export const server = setupServer(...handlers)`,
].join(`\n`);

export const combineHandlers = (entityList: string[]) => {
  const handlersImport =  entityList.map((entity) => {
    return `import { ${entity}Handlers } from './${entity}_handlers';`
  }).join('\n')

  const combineHandlers = 
    `export const handlers = [
      ${entityList.map((entity) => {
        return `...${entity}Handlers, `
      }).join('\n')}
    ]`

  return [handlersImport, combineHandlers].join('\n\n')
}

export const controllersTypeTemplate = (entity: string, operationCollectionList: OperationCollection) => {
  const template = `
  import type { HttpResponseResolver } from "msw";
  ${transformToDtoImportCode(operationCollectionList)}
  
  export type T${entity}Controllers = {
    ${transformToControllersType(operationCollectionList)}
  }
  `

  return template
}