import { isString, mapValues } from 'es-toolkit';
import { OpenAPIV3 } from 'openapi-types';
import path from 'path';
import { transformToGenerateResultFunctions, transformToHandlerCode } from '../transform';
import { TOperation, TOptions } from '../types';
import { writeFile } from '../utils';

interface IHandler {
  generate(targetFolder: string): Promise<void>;
}

class Handler implements IHandler {
  private readonly options: TOptions;
  private readonly groupByEntity: Record<string, TOperation[]>;
  private readonly entityList: string[];
  private readonly apiDoc: OpenAPIV3.Document;

  constructor(options: TOptions, groupByEntity: Record<string, TOperation[]>, apiDoc: OpenAPIV3.Document) {
    this.options = options;
    this.groupByEntity = groupByEntity;
    this.entityList = Object.keys(groupByEntity);
    this.apiDoc = apiDoc;
  }

  async generate(targetFolder: string): Promise<void> {
    await this.#generateHandlersByEntity(targetFolder);
    await this.#generateCombinedHandler(targetFolder);
  }

  async #generateHandlersByEntity(targetFolder: string) {
    const codeList = mapValues(this.groupByEntity, (operationCollection, entity) => {
      return isString(entity) ? this.#mockTemplate(operationCollection, entity) : null;
    });

    await Promise.all(
      Object.entries(codeList).map(async ([entity, code]) => {
        if (!code) return;

        await writeFile(
          path.resolve(process.cwd(), path.join(targetFolder, 'handlers'), `${entity}.handlers.ts`),
          code,
        );
      }),
    );
  }

  async #generateCombinedHandler(targetFolder: string) {
    const combinedHandlers = () => {
      const handlersImport = this.entityList
        .map(entity => {
          return `import { ${entity}Handlers } from './${entity}.handlers';`;
        })
        .join('\n');

      const combineHandlers = `export const handlers = [
        ${this.entityList
          .map(entity => {
            return `...${entity}Handlers, `;
          })
          .join('\n')}
        ]`;

      return [handlersImport, combineHandlers].join('\n\n');
    };

    await writeFile(path.resolve(process.cwd(), path.join(targetFolder, 'handlers'), `index.ts`), combinedHandlers());
  }

  #mockTemplate(operationCollection: TOperation[], entity: string) {
    const baseURL = typeof this.options.baseUrl === 'string' ? this.options.baseUrl : this.#urlInDoc();

    const imports = [
      `import { HttpResponse, http, type HttpResponseResolver  } from 'msw';`,
      `import { faker } from '@faker-js/faker';`,
      `import { controllers } from '${this.options?.controllerPath ?? '@/app/mocks/controllers'}';`,
    ].join('\n');

    const apiCounters = `
      // Map to store counters for each API endpoint
      const apiCounters = new Map<string, number>();

      const next = (apiKey: string) => {
        let currentCount = apiCounters.get(apiKey) ?? 0;
        if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
          currentCount = 0;
        }
        apiCounters.set(apiKey, currentCount + 1);
        return currentCount;
      };
    `;

    return `/**
      * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/dhlab-org/msw-auto-mock)
      * Feel free to commit/edit it as you need.
      */
      /* eslint-disable */
      /* tslint:disable */
      // @ts-nocheck
      ${imports}
      
      faker.seed(1);
      
      const baseURL = '${baseURL}';
      ${this.options.static ? '' : `const MAX_ARRAY_LENGTH = ${this.options?.maxArrayLength ?? 20};`}
      
      ${apiCounters}
      
      export const ${entity}Handlers = [
        ${transformToHandlerCode(operationCollection)}
      ];
      
      ${transformToGenerateResultFunctions(operationCollection, baseURL, this.options)}
      `;
  }

  #urlInDoc() {
    let server = this.apiDoc.servers?.at(0);
    let url = '';
    if (server) {
      url = server.url;
    }
    if (server?.variables) {
      Object.entries(server.variables).forEach(([key, value]) => {
        url = url.replace(`{${key}}`, value.default);
      });
    }

    return url;
  }
}

export { Handler };
